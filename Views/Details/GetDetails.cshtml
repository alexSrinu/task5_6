@model List<task5.Models.Details>

@{
    ViewBag.Title = "GetDetails";
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
}

<h2>GetDetails</h2>
@Html.ActionLink("Create", "Index")

@TempData["Success"]

@using (Html.BeginForm("GetDetails", "Details", FormMethod.Get))
{
    /*  <div class="container">
          <div class="row">
              <div class="col-md-6 col-lg-4 mx-auto">
                  <div class="form-group">
                      <label for="searchName">Search by Name:</label>
                      <input type="text" class="form-control" id="searchName" name="searchString" placeholder="Enter name">
                  </div>
                  <button type="submit" class="btn btn-primary" id="searchButton">Search</button>
              </div>
          </div>
          <div id="results" class="mt-3"></div>
      </div>*/
    <div class="container">
        <div class="row">
            <div class="col-md-6 col-lg-4 mx-auto">
                <div class="form-group">
                    <label for="searchName">Search by Name:</label>
                    <input type="text" class="form-control" id="searchName" name="searchString" placeholder="Enter name">
                </div>
            </div>
        </div>
        <div id="results" class="mt-3"></div>
    </div>

    <h4>States</h4>
    
    
      <div class="state-container">
            @foreach (var state in ViewBag.States)
            {

                <div class="state-item">
                    <label class="state-label">
                        <input type="checkbox" class="state-checkbox" value="@state.StateName" /> @state.StateName
                    </label>
                </div>
                //    TempData["state"] = @state.StateName;

                <div class="city-container" id="city-container-@state.StateName" style="display:none; margin-left: 20px;">


                </div>
            }
        </div>




    <div class="container mt-4">
        <div class="gridContainer">
            <div id="grid"></div>
            <table class="table table-bordered table-striped" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Mobile</th>
                        <th>State</th>
                        <th>City</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Model)
                    {
                        <tr>
                            <td>@user.Name</td>
                            <td>@user.Email</td>
                            <td>@user.Mobile</td>
                            <td>@user.StateName</td>
                            <td>@user.CityName</td>
                            <td>
                                <a href="@Url.Action("Edit", new { id = user.Id })" class="btn btn-warning btn-sm" title="Edit">
                                    <i class="bi bi-pencil"></i>
                                </a>
                                <button type="button" class="btn btn-danger btn-sm" onclick="confirmDelete(@user.Id)">
                                    <i class="bi bi-trash3-fill"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="pagination-container">
            <div id="pagination"></div>

            <nav aria-label="Page navigation example">
                <ul class="pagination justify-content-end">
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("GetDetails", new { pageNumber = ViewBag.CurrentPage - 1, pageSize = ViewBag.PageSize })" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Previous">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }

                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                        <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("GetDetails", new { pageNumber = i, pageSize = ViewBag.PageSize })">@i</a>
                        </li>
                    }

                  @*  @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("GetDetails", new { pageNumber = ViewBag.CurrentPage + 1, pageSize = ViewBag.PageSize })" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item disabled">
                            <a class="page-link" href="#" aria-label="Next">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }*@
                </ul>
            </nav>
        </div>
    </div>
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/2.1.4/css/dataTables.dataTables.min.css" />

<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://cdn.datatables.net/2.1.4/js/jquery.dataTables.min.js"></script>

<script>
    $(document).ready(function () {
        $(document).ready(function () {
    $('.state-checkbox').on('change', function () {
        var selectedStates = $('.state-checkbox:checked').map(function () {
            return $(this).val();
        }).get().join(',');

        $.ajax({
            url: '@Url.Action("GetCitiesByStates", "Details")',
            type: 'GET',
            data: { stateNames: selectedStates },
            success: function (data) {
                $('.city-container').hide();
                $.each(data, function (index, cityGroup) {
                    var cityContainer = $('#city-container-' + cityGroup.StateName);
                    var checkedCities = cityContainer.find('.city-checkbox:checked').map(function () {
                        return $(this).val();
                    }).get();

                    cityContainer.empty();
                    $.each(cityGroup.Cities, function (index, city) {
                        cityContainer.append(
                            '<label>' +
                                '<input type="checkbox" class="city-checkbox" value="' + city + '" ' + (checkedCities.includes(city) ? 'checked' : '') + ' /> ' + city +
                            '</label><br />'
                        );
                    });

                    cityContainer.show();
                });

                updateCityCheckboxes();
            },
            error: function (xhr, status, error) {
                alert("An error occurred: " + error);
            }
        });
    });

    $(document).on('change', '.city-checkbox', function () {
        updateCityCheckboxes();
    });

    function updateCityCheckboxes() {
        var selectedCities = $('.city-checkbox:checked').map(function () {
            return $(this).val();
        }).get().join(',');

        $.ajax({
            url: '@Url.Action("GetDetails", "Details")',
            type: 'GET',
            data: { citynames: selectedCities},
            success: function (data) {
                var gridContainer = $('table tbody');
                gridContainer.empty();
                $.each(data, function (index, detail) {
                    gridContainer.append(
                        '<tr>' +
                            '<td>' + detail.Name + '</td>' +
                            '<td>' + detail.Email + '</td>' +
                            '<td>' + detail.Mobile + '</td>' +
                            '<td>' + detail.StateName + '</td>' +
                            '<td>' + detail.CityName + '</td>' +
                            '<td>' +
                                '<a href="/Details/Edit/' + detail.Id + '" class="btn btn-warning btn-sm" title="Edit">' +
                                    '<i class="bi bi-pencil"></i>' +
                                '</a>' +
                                '<button type="button" class="btn btn-danger btn-sm" onclick="confirmDelete(' + detail.Id + ')">' +
                                    '<i class="bi bi-trash3-fill"></i>' +
                                '</button>' +
                            '</td>' +
                        '</tr>'
                    );
                });
            },
            error: function (xhr, status, error) {
                alert("An error occurred: " + error);
            }
        });
    }
});


        var typingTimer;
        var doneTypingInterval = 500;

        $('#searchName').on('keyup', function () {
            clearTimeout(typingTimer);
            if ($('#searchName').val()) {
                typingTimer = setTimeout(doneTyping, doneTypingInterval);
            }
        });

        $('#searchName').on('keydown', function () {
            clearTimeout(typingTimer);
        });

        function doneTyping() {
            var searchString = $('#searchName').val().trim();
            if (searchString.length > 0) {
                $.ajax({
                    url: '@Url.Action("GetDetails", "Details")',
                    type: 'GET',
                    data: { searchString: searchString },
                    success: function (data) {
                        $('#results').empty();
                        if (data && data.length > 0) {
                            $.each(data, function (index, item) {
                                $('#results').append('<div class="result-item">' + item.Name + '</div>');
                            });
                        } else {
                            $('#results').append('<div>No results found</div>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching data:', error);
                        $('#results').append('<div>Error fetching results. Please try again.</div>');
                    }
                });
            } else {
                $('#results').empty();
            }
        }
    });


    function confirmDelete(Id) {
        Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/Details/Delete',
                    type: 'POST',
                    data: { Id: Id },
                    success: function (response) {
                        Swal.fire('Deleted!', 'The record has been deleted.', 'success');
                        location.reload();
                    },
                    error: function (xhr, status, error) {
                        Swal.fire('Error!', 'There was a problem deleting the user.', 'error');
                    }
                });
            }
        });
    }
</script>

